version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - boltq-network

  # API service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["./bin/api"]
    ports:
      - "8080:8080"  # API port
      - "9090:9090"  # Metrics port
    environment:
      - API_PORT=8080
      - METRICS_PORT=9090
      - REDIS_ADDR=redis:6379
      - ENVIRONMENT=production
    restart: always
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - boltq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Worker service
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: ["./bin/worker"]
    ports:
      - "9091:9091"  # Worker metrics port
    environment:
      - REDIS_ADDR=redis:6379
      - METRICS_PORT=9091
      - NUM_WORKERS=8
      - MAX_ATTEMPTS=3
      - ENVIRONMENT=production
    restart: always
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 512M
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - boltq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus service
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9092:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - boltq-network
    depends_on:
      - api
      - worker

  # Grafana service
  grafana:
    image: grafana/grafana:10.0.3
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-password}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - boltq-network
    depends_on:
      - prometheus

  # Frontend Playground
  playground:
    build:
      context: ./playground
      dockerfile: Dockerfile
    ports:
      - "80:80"  # Serve on standard HTTP port
    environment:
      - API_URL=http://api:8080
      - GRAFANA_URL=http://grafana:3000
      - PROMETHEUS_URL=http://prometheus:9092
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - boltq-network
    depends_on:
      - api
      - worker

  # Load balancer
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "443:443"  # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
    networks:
      - boltq-network
    depends_on:
      - api
      - playground
      - grafana
      - prometheus

# Persistent volumes
volumes:
  redis-data:
  prometheus-data:
  grafana-data:

# Network
networks:
  boltq-network:
    driver: bridge